#!/usr/bin/env python3
"""
this script is to run in the background to monitor
system statistics:CPU usage, disk space, available memory and name resolution
"""
import logging
import socket
import psutil
import time
import email.message
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

#configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

class WarningHandler(logging.Handler):
    """Logging handler to stores only WARNING messages in a list"""
    def __init__(self, warning_list):
        super().__init__()
        self.log = warning_list
    
    def emit(self, record):
        if record.levelno == logging.WARNING:
            log_entry = self.format(record)
            self.log.append(log_entry)
    
def capture_warning_logs(func, *args, **kwargs):
    """capture warning messages generated by a function and returns them as a list."""
    warning_list =[]
    list_handler = WarningHandler(warning_list)
    formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s')
    list_handler.setFormatter(formatter)
    logger = logging.getLogger()
    logger.addHandler(list_handler)
        
    try:
        func(*args, **kwargs)
    finally:
        logger.removeHandler(list_handler)
        
    return warning_list

def check_cpu_usage(cpu_threshold):
    """Send warning if CPU crosses admin-defined threshold"""
    usage = psutil.cpu_percent(1)
    if usage < cpu_threshold:
        logging.info(f"CPU all okay. Operating below {cpu_threshold}%. Current usage: {usage}%")
    elif usage == cpu_threshold:
        logging.warning(f"Alert! CPU operating at {cpu_threshold}% Current usage: {usage}%")
    else:
        logging.warning(f"Error - CPU usage is over {cpu_threshold}%")

def check_disk_full(disk_threshold):
    """Send warning if disk space drops below admin-defined threshold."""
    partitions = psutil.disk_partitions()
    for partition in partitions:
        try:
            usage = psutil.disk_usage(partition.mountpoint)
            percent_used = usage.percent
            if percent_used > disk_threshold:
                logging.warning(f"Error - Available disk space on {partition.mountpoint} is less than {100-disk_threshold}%")
            else:
                logging.info(f"Disk space on {partition.mountpoint} okay. Current usage: {percent_used}%") 
        except PermissionError:
            logging.debug(f"{disk_usage_percentages[partition.mountpoint]} permission denied")
        except Exception as e:
            logging.error(f"{disk_usage_percentages[partition.mountpoint]} Error:{e}")

def check_mem_full(mem_threshold):
    """Send warning if memory drops below admin-defined threshold."""
    mem_threshold_byte = mem_threshold * 1048576 #convert MB to bytes
    available_memory = psutil.virtual_memory().available 
    if  available_memory < mem_threshold_byte:
        logging.warning(f"Error - Available memory is less than {mem_threshold}MB")
    else:
        logging.info(f"Memory healthy. Available memory: {available_memory} bytes")

def check_localhost():
    """Send warning if local host cannot be resolved to 127.0.0.1"""
    try:
        localhost = socket.gethostbyname('localhost')
        if localhost != '127.0.0.1':
            logging.warning(f"Error - localhost cannot be resolved to 127.0.0.1")
        else:
            logging.info(f"Local host configuration OK")
    except socket.gaierror:
        logging.warning("Error - localhost could not be resolved.")

def generate_html_email(sender, recipient, subject, log_data):
    """Generates an HTML email with a table from log data."""

    message = MIMEMultipart("alternative")
    message["From"] = sender
    message["To"] = recipient
    message["Subject"] = subject

    # Create the HTML table
    html_table = "<table><tr><th>Case</th><th>Subject line</th></tr>"
    
    # CPU logs
    for log in cpu_logs:
        html_table += f"<tr><td>CPU usage is over 80%</td><td>{log}</td></tr>"

    # Disk logs
    for log in disk_logs:
        html_table += f"<tr><td>Available disk space is lower than 20%</td><td>{log}</td></tr>"

    # Memory logs
    for log in mem_logs:
        html_table += f"<tr><td>Available memory is less than 100MB</td><td>{log}</td></tr>"

    # Host logs
    for log in host_logs:
        html_table += f"<tr><td>hostname 'localhost' cannot be resolved to 127.0.0.1</td><td>{log}</td></tr>"

    html_table += "</table>"

    # Create the HTML part
    html_part = MIMEText(f"""
    <html>
      <head></head>
      <body>
        {html_table}
        <p>Please check your system and resolve the issue as soon as possible.</p>
      </body>
    </html>
    """, "html")

    # Attach the HTML part
    message.attach(html_part)

    return message

def send_email(message):
    """Sends the message to the configured SMTP server."""
    try:
        mail_server = smtplib.SMTP('localhost')
        mail_server.send_message(message)
        mail_server.quit()
        print("Email sent successfully")
    except Exception as e:
        print(f"Error sending email: {e}")

if __name__ == "__main__":
    #initialise thresholds
    cpu_threshold = 80 #percent
    disk_threshold = 80 #percent
    mem_threshold = 100 #MB

    #keep on looping until ^C
    while True: 
        cpu_warning_log = capture_warning_logs(check_cpu_usage, cpu_threshold)
        disk_warning_log = capture_warning_logs(check_disk_full, disk_threshold)
        mem_warning_log = capture_warning_logs(check_mem_full, mem_threshold)
        host_warning_log = capture_warning_logs(check_localhost)

       # Generate and send the email
        sender = "automation@example.com"
        recipient = "student@example.com"
        subject = "System Health Check Report"
        email_message = generate_html_email(sender, recipient, subject, cpu_warning_log, disk_warning_log, mem_warning_log, host_warning_log)
        send_email(email_message)

        time.sleep(60) #wait for 60 seconds. 


        


